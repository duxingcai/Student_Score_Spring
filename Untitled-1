二分查找：
非递归实现：
public static int binarySearch(int []arr,int target){
        int low=0;
        int hight=arr.length-1;
        int mid;
        while(low<=hight){
            mid=(low+hight)/2;
            if(arr[mid]==target){
                return mid+1;
            }else if(arr[mid]<target){
                low=mid+1;
            }else{
                hight=mid-1;
            }
        }
        return -1;
    }

递归实现：
public static int binarySearch(int []arr,int target,int low,int hight){
        if(low<=hight){
            int mid=(low+hight)/2;
            if(target==arr[mid]){
                return mid+1;
            }
            else if(target>arr[mid]){
                return binarySearch(arr,target,mid+1,hight);
            }else{
                return binarySearch(arr,target,low,mid-1);
            }
        }
        return -1;
}

//找出单链表中倒数第k个数
public Node findElem(Node head,int k){
    if(k<1){
        return null;
    }
    Node p1=head;
    Node p2=head;
    //p1前移k-1步
    for(int i=0;i<k-1&&p1!=null;i++){
        p1=p1.next;
    }
    if(p1==null){
        System.out.println("k不合法！");
        return null;
    }
    while(p1.next!=null){
        p1=p1.next;
        p2=p2.next;
    }
    return p2;
}

//寻找单链表的中间结点
//思路：定义快指针fast，慢指针slow
public Node searchMediumNode(Node head){
    Node fast=head;
    Node slow=head;
    while(fast!=null&&fast.next!=null&&fast.next.next){
        fast=fast.next.next;
        slow=slow.next;
    }
    return slow;
}

//从链表中删除重复的数据
//使用Hashtable
public void deleteDuplecateData(Node head){
    Hashtable<Integer,Integer> table=new Hashtable<Integer,Integer>();
    Node tmp=head;
    Node pre=null;
    while(tmp!=null){
        if(table.containsKey(tmp.data)){
            pre.next=tmp.next;
        }else{
            table.put(tmp.data,1);
            pre=tmp;
        }
        tmp=tmp.next;
    }
}


//双重循环遍历
public void deleteDuplecateData(Node head){
    Node p=head;
    while(p!=null){
        Node q=p;
        while(q.next!=null){
            if(p.data==q.next.data){
                q.next=q.next.next;
            }else{
                q=q.next;
            }
        }
        return p=p.next;
    }
}

//打印两个有序链表的公共部分
public class Node{
    public value;
    public Node next;
    public Node(int data){
        this.data=data;
    }
}
public void printCommonPart(Node head1,Node head2){
    System.out.println("Common Part:");
    while(head1!=null&&head2!=null){
        if(head1.value<head2.value){
            head1=head1.next;
        }else if(head1.value>head2.value){
            head2=head2.next;
        }else{
            System.out.println(head1.value+" ");
            head1=head1.next;
            head2=head2.next;
        }
    }
    System.out.println();
}

public boolean isPalindrome(Node head){
    Stack<Node> stack=new Stack<Node>();
    Node cur=head;
    while(cur!=null){
        stack.push(cur);
        cur=cur.next;
    }
    while(head!=null){
        if(head.value!=stack.pop().value){
            return false;
        }
        head=head.next;
    }
    return true;
}

//反转双向链表
public class DoubleNode{
    public int value;
    public DoubleNode last;
    public DoubleNode next
    public DoubleNode(int data){
        this.data.data;
    }
}
public DoubleNode reverseDoubleLinkedList(DoubleNode head){
    DoubleNode pre=null;
    DoubleNode next=null;
    while(head!=null){
        next=head.next;
        head.next=pre;
        head.last=next;
        pre=head;
        head=next;
    }
    return pre;
}

//在双链表删除倒数第k个节点
public class DoubleNode{
    public int value;
    public DoubleNode last;
    public DoubleNode next
    public DoubleNode(int data){
        this.data.data;
    }
}
public DoubleNode removeLastKthNode(DoubleNode head,int lastKth){
    if(head==null||lastKth<1){
        return head;
    }
    DoubleNode cur=head;
    while(cur!=null){
        lastKth--;
        cur=cur.next;
    }
    if(lastKth==0){
        head=head.next;
        head.last=null;
    }
    if(lastKth<0){
        cur=head;
        while(++lastKth!=0){
            cur=.cur.next;
        }
        DoubleNode newNext=cur.next.next;
        cur.next=newNext;
        if(newNext!=null){
            newNext.last=cur;
        }
    }
    return head;
}

//合并两个有序单链表
public class Node{
    public value;
    public Node next;
    public Node(int data){
        this.data=data;
    }
}
public Node mergeLinkedList(Node head1,Node head2){
    if(head1==null||head2==null){
        return head1!=null?head1:head2;
    }
    Node head=head1.value<head2.value?head1:head2;
    Node cur1=head==head1?head1:head2;
    Node cur2=head==head1?head1:head2;
    Node pre=null;
    Node next=null;
    while(cur1!=null&&cur2!=null){
        if(cur1.value<=cur2.value){
            pre=cur1;
            cur1=cur1.next;
        }else{
              next=cur2.next;
              pre.next=cur2;
              cur2.next=cur1;
              pre=cur2;
              cur2=next;
        }
    }
    pre.next=cur1==null?cur2:cur1;
    return head;
}

//向有序环形单链表中插入节点
public class Node{
    public value;
    public Node next;
    public Node(int data){
        this.data=data;
    }
}
public Node insertNum(Node head,int num){
    Node node=new Node(num);
    if(head==null){
        node.next=node;
        return node
    }
    Node pre=head;
    Node cur=head;
    while(cur!=null){
        if(pre.value<=num&&cur.value>=num){
            break;
        }
        pre=cur;
        cur=cur.next;
    }
    pre.next=node;
    node.next=cur;
    return head.value<num?head:node;
}

//单链表中删除指定值的节点
//1.利用栈
public Node removeValue(Node head,int num){
    Stack<Node> stack=new Stack<Node>();
    while(head!=null){
        if(head.value!=num){
            stack.push(head);
        }
        head=head.next;
    }
    while(!stack.isEmpty()){
        stack.peek().next=head;
        head=stack.pop();
    }
    return head;
}

//2.直接调整
public Node removeValue(Node head,int num){
    while(head!=null){
        if(head.value!=num){
            break;
        }
        head=head.next;
    }
    Node pre=head;
    Node cur=head;
    while(cur!=null){
        if(cur.value==num){
            pre.next=cur.next;
        }else{
            pre=cur;
        }
        cur=cur.next;
    }
    return head;
}

//两个单链表生成相加链表
//利用栈结构
public class Node{
    public int value;
    public Node next;
    public Node(int data){
        this.data=data;
    }
}
public Node addList(Node head1,Node head2){
    Stack<Integer> s1=new Stack<Integer>();
    Stack<Integer> s2=new Stack<Integer>();
    while(head1!=null){
        s1.push(head1.value);
        head1=head1.next;
    }
     while(head2!=null){
        s2.push(head2.value);
        head2=head2.next;
    }
   int ca=0;
   int n1=0;
   int n2=0;
   int n=0;
   Node node=null;
   Node pre=null;
   while(!s1.isEmpty()||!s2.isEmpty()){
       n1=s1.isEmpty()?0:s1.pop();
       n2=s2.isEmpty()?0:s2.pop();
       n=n1+n2+ca;
       pre=node;
       node=new Node(n%10);
       node.next=pre;
       ca=n/10;
   }
   if(ca==1){
       pre=node;
       node=new Node(1);
       node.next=pre;
   }
   return node;
}

//将单链表的每k个节点之间逆序
//利用栈结构
public Node reverseKNode(Node head,int k){
    if(k<2){
        return head;
    }
    Stack<Node> stack=new Stack<Node>();
    Node newHead=head;
    Node cur=null;
    Node pre=null;
    Node next=null;
    while(cur!=null){
        next=cur.next;
        stack.push(cur);
        if(stack.size==k){
            pre=resign(stack,pre,next);
            newHead=newHead==head?cur:newHead;
        }
        cur=next;
    }
    return newHead;
}
public Node resign(Stack<Node>,Node left,Node right){
    Node cur=stack.pop();
    if(left!=null){
        left.next=cur;
    }
    Node next=null;
    while(!stack.isEmpty()){
        next=stack.pop();
        cur.next=next;
        cur=next;
    }
    cur.next=right;
    return cur;
}

//删除链表的中间节点
public class Node{
    public value;
    public Node next;
    public Node(int data){
        this.data=data;
    }
}
public Node removeMidNode(Node head){
    if(head==null||head.next==null){
        return head;
    }
    if(head.next.next==null){
        return head.next;
    }
    Node pre=head;
    Node cur=head.next.next;
    while(cur.next!=null&&cur.next.next!=null){
        pre.pre.next;
        cur=cur.next.next;
    }
    pre.next=pre.next.next;
    return head;
}


//反转单向链表
public class Node{
    public int value;
    public Node next;
    public Node(int data){
        this.data=data;
    }
}
public Node reverseLinkedList(Node head){
    Node pre=null;
    Node next=null;
    while(head!=null){
        next=head.next;
        head.next=pre;
        pre=head;
        head=next;
    }
    return pre;
}

//反转部分单向链表
public class Node{
    public int value;
    public Node next;
    public Node(int data){
        this.data=data;
    }
}
public Node reversePartLinkedList(Node head,int from,int to){
    int len=0;
    Node node1=null;
    Node fPre=null;
    Node tPos=null;
    while(node!=null){
        len++;
        fPre=len==from-1?node1:fPre;
        tPos=len==to+1?node1:tPos;
        node1=node1.next;
    }
    if(from>to||from<1||to>len){
        return head;
    }
    node1=fPre==null?head:fPre.next;
    Node node2=node1.next;
    node1.next=tPos;
    Node next=null;
    while(node2!=tPos){
        next=node2.next;
        node2.next=node1;
        node1=node2;
        node2=next;
    }
    if(fPre!=null){
        fPre.next=node1;
        return head;
    }
    return node1;
}


//环形单链表的约瑟夫问题
public class Node{
    public int value;
    public Node next;
    public Node(int data){
        this.value=data;
    }
}
public Node josephusKill(Node head,int m){
    if(head==null||head.next==head||m<1){
        return head;
    }
    Node last=head;
    while(last.new!=head){
        last=last.next;
    }
    int count=0;
    while(head!=last){
        if(++count==m){
            last.next=head.next;
            count=0;
        }else{
            last=last.next;
        }
        head=last.next;
    }
    return head;
}

//二叉树遍历
//递归实现
public class Node{
    public int value;
    public Node left;
    public Node right;
    public Node(int data){
        this.value=data;
    }
}


//二叉树先序遍历
//递归实现
public void preOrderRecur(Node head){
    if(head==null){
        return;
    }
    System.out.println(head.value + " ");
    preOrderRecur(head.left);
    preOrderRecur(head.right);
}
//非递归实现
public void preOrderUnRecur(Node head){
    System.out.println("pre-order: ");
    if(head!=null){
        Stack<Node> stack=new Stack<Node>();
        stack.add(head);
        while(!stack.isEmpty()){
            head=stack.pop();
            System.out.println(head.value + " ");
            if(head.right!=null){
                stack.push(head.right);
            }
            if(head.left!=null){
                stack.push(head.left);
            }
        }
    }
    System.out.println();
}

//二叉树中序遍历
//递归实现
public void inOrderRecur(Node head){
    if(head==null){
        return;
    }
    System.out.println(head.value + " ");
    inOrderRecur(head.left);
    inOrderRecur(head.right);
}
//非递归实现
public void inOrderUnRecur(Node head){
    System.out.println("in-order: ");
    if(head!=null){
        Stack<Node> stack=new Stack<Node>();
        while(!stack.isEmpty()||head!=null){
            if(head!=null){
                stack.push(head);
                head=head.left;
            }else{
                  head=stack.pop();
                  System.out.println(head.value + " ");
                  head=head.right;
            }
        }
    }
    System.out.println();
}

//二叉树后序遍历
//递归实现
public void posOrderRecur(Node head){
    if(head==null){
        return;
    }
    System.out.println(head.value + " ");
    posOrderRecur(head.left);
    posOrderRecur(head.right);
}
//非递归实现
public void posOrderUnRecur(Node head){
    System.out.println("pos-order: ");
    if(head!=null){
        Stack<Node> s1=new Stack<Node>();
        Stack<Node> s2=new Stack<Node>();
        s1.push(head);
        while(!s1.isEmpty()){
            head=s1.pop();
            s2.push();
            if(head.left!=null){
                s1.push(head.left);
            }
            if(head.right!=null){
                s1.push(head.right);
            }
        }
        while(!s2.isEmpty()){
            System.out.println(s2.pop().value + " ");
        }
    }
    System.out.println();
}


//删除链表a/b处的节点
public Node removeByBatio(Node head,int a,int b){
    if(a<1||a>b){
        return head;
    }
    int len=0;
    Node cur=head;
    while(cur!=null){
        len++
        cur=cur.next;
    }
    len=(int)Math.ceil(((double)(a*len))/(double)b);
    if(len==1){
        head=head.next;
    }
    if(len>1){
        cur=head;
        while(--len!=1){
            cur=cur.next;
        }
        cur.next=cur.next.next;
    }
    return head;
}

//返回链表第一个进入环的节点
public Node getLoopNode(Node head){
    if(head==null||head.next==null||head.next.next==null){
        return null;
    }
    Node node1=head.next;
    Node node2=head.next.next;
    while(node1!=node2){
        if(node1.next==null||node2.next.next==null){
            return null;
        }
        node2=node2.next.next;
        node1=node1.next;
    }
    node2=head;//node2->walk again from head 
    while(node1!=node2){
        node1=node1.next;
        node2=node2.next;
    }
    return node1;
}

//返回两个链表相交节点
public Node getIntersectNode(Node head1,Node head2){
    if(head1==null||head2==null){
        return null;
    }
    Node cur1=head1;
    Node cur2=head2;
    int n=0;
    while(cur1.next!=null){
        n++;
        cur1=cur1.next;
    }
    while(cur2.next!=null){
        n--;
        cur2=cur2.next;
    }
    while(cur1!=cur2){
        return null;
    }
    cur1=n>0?head1:head2;
    cur2=cur1==head1?head2:head1;
    n=Math.abs(n);
    while(n!=0){
        cur1=cur1.next;
        cur2=cur2.next;
    }
    return cur1;
}

//将搜索二叉树转换成双向链表
//利用队列
public Node searchBinaryTreeConvertDoubleLinkedList(Node head){
    Queue<Node> queue=new Queue<Node>();
    inOrderToQueue(head,queue);
    if(queue.isEmpty()){
        return head;
    }
    head=queue.poll();
    Node pre=head;
    pre.left=null;
    Node cur=null;
    while(!queue.isEmpty()){
        cur=queue.poll();
        pre.right=cur;
        cur.left=pre;
        pre=cur;
    }
    pre.right=null;
    return head;
}
public void inOrderToQueue(Node head,Queue<Node> queue){
    if(head==null){
        inOrderToQueue(head.left,queue);
        queue.offer(head);
        inOrderToQueue(head.right.queue);
    }
} 

//单链表的选择排序
public static Node selectSort(Node head){
    Node tail=null;//排序部分尾部
    Node cur=head;//未排序部分头部
    Node smallPre=null;//最小节点的前一个节点
    Node small=null;//最小的节点
    while(cur!=null){
        small=cur;
        smallPre=getSmallestPreNode(cur);
        if(smallPre!=null){
            small=smallPre.next;
            smallPre.next=small.next;
        }
        cur=cur==small?cur.next:cur;
        if(tail==null){
            head=small;
        }else{
            tail.next=small;
        }
        tail=small;
    }
    return head;
}

public Node getSmallestPreNode(Node head){
    Node smallPre=null;
    Node small=head;
    Node cur=head.next;
    while(cur!=null){
        if(cur.value<small.value){
            smallPre=pre;
            small=cur;
        }
        pre=cur;
        cur=cur.next;
    }
    return smallPre;
}

//复制含有随机指针节点的链表
public Node copyLinkedListWithRand(Node head){
    if(head==null){
        return null;
    }
    Node cur=head;
    Node next=null;
    //复制并链接每一个节点
    while(cur!=null){
        next=cur.next;
        cur.next=new Node(cur.value);
        cur.next.next=next;
        cur=next;
    }
    cur=head;
    Node curCopy=null;
    //设置复制节点的rand指针
    while(cur!=null){
        next=cur.next.next;
        curCopy=cur.next;
        curCopy.rand=cur.rand!=null?cur.rand.next:null;
        cur=next;
    }
    Node res=head.next;
    cur=head;
    //拆分
    while(cur!=null){
        next=cur.next.next;
        curCopy=cur.next;
        cur.next=next;
        curCopy.next=next!=null?next.next:null;
        cur=next;
    }   
    return res;
}

public Node deleteNode(int head,int n){
    while(head!=null){
        if(head.next.value==n){
            head.next=head.next.next;
        }
        head=head.next;
    }
}



public class Node{
    public int data;
    public Node next;
    public Node(int data){
        this.data=data;
    }
}
//在链表尾部加入新节点
public void addNode(int n){
    Node newNode=new Node(n);
    if(head==null){
        head=newNode;
        return;
    }
    Node tmp=head;
    while(tmp.next!=null){
        tmp=tmp.next;
    }
    tmp.next=newNode;
}

public int length(){
    int len=0;
    Node tmp=head;
    while(tmp!=null){
        len++;
        tmp=tmp.next;
    }
    return len;
}

//在二叉树中找到累加和为指定值的最长路径长度
public class Node{
    public int value;
    public Node left;
    public Node right;

    public Node(int data){
        this.value=data;
    }
}
public int getMaxlength(Node head,int sum){
    HashMap<Integer,Integer> sumMap=new HashMap<Integer,Integer>();
    sumMap.put(0,0);
    return preOrder(head,sum,0,1,0,sumMap);
}
public int preOrder(Node head,int sum,int preSum,int level,int maxLen,HashMap<Integer,Integer> sumMap){
    if(head==null){
        return maxLen;
    }
    int curSum=preSum+head.value;
    if(!sumMap.containsKey(curSum)){
        sumMap.put(curSum,level);
    }
    if(sumMap.containsKey(curSum-sum)){
        maxLen=Math.max(level-sumMap.get(curSum-sum),maxLen);
    }
    maxLen=preOrder(head.left,sum,curSum,level+1,maxLen,sumMap);
    maxLen=preOrder(head.right,sum,curSum,level+1,maxLen,sumMap);
    if(level==sumMap.get(curSum)){
        sumMap.remove(curSum);
    }
    return maxLen;
}

//找到二叉树中的最大搜索二叉子树
public class Node{
    public int value;
    public Node left;
    public Node right;

    public Node(int data){
        this.value=data;
    }
}
public Node biggestSubBST(Node head){
    int[] record=new int[3];
    return posOrder(head,record);
}
public Node posOrder(Node head,int[] record){
    if(head==null){
        record[0]=0;
        record[1]=Integer.MAX_VALUE;
        record[2]=Integer.MIN_VALUE;
        return null;
    }
    int value=head.value;
    Node left=head.left;
    Node right=head.right;
    Node lBST=posOrder(left,record);
    int lSize=record[0];
    int lMin=record[1];
    int lMax=record[2];
    Node rBST=posOrder(left,record);
    int rSize=record[0];
    int rMin=record[1];
    int rMax=record[2];
    record[1]=Math.min(lMin,value);
    record[2]=Math.max(rMax,value);
    if(left==lBST&&right==rBST&&lMax<value&&value<rMin){
        record[0]=lSize+rSize+1;
        return head;
    }
    record[0]=Math.max(lSize,rSize);
    return lSize>rSize?lBST:rBST;
}

//在二叉树中找到一个节点的后继节点
public class Node{
    public int value;
    public Node left;
    public Node right;
    public Node parent;

    public Node(int data){
        this.value=data;
    } 
}
public Node getNextNode(Node head){
    if(node==null){
        return node;
    }
    if(node.right!=null){
        return getLeftMost(node.right);
    }else{
        Node parent=node.parent;
        while(parent!=null&&parent.left!=null){
            node=parent;
            parent=node.parent;
        }
        return parent;
    }
}
public NodegetLeftMost(Node node){
    if(node==null){
        return node;
    }
    while(node.left!=null){
        node=node.left;
    }
    return node;
}

//交换链表的相邻节点
public void exchangeAdjacentNode(Node head){
    Node cur=head;
    Node tmp;
    Node nextNode;
    if(cur==head||cur.next==null){
        return;
    }
    head=cur.next;
    while(cur.!=null&&cur.next!=null){
        nextNode=cur.next;
        cur.Node(nextNode.next)
    }
}

//逐对逆序链表
public class Node{
    public int value;
    public Node next;
    public Node(int data){
        this.value=data;
    }
}
//递归实现
public Node reversePairRecursive(Node){
    Node tmp;
    if(head==null||head.next==null){
        return;
    }else{
        //逆置第一对
        tmp=head.next;
        head.next=tmp.next;
        head=tmp;
        //链表余下部分继续递归调用该函数
        head.next.next=reversePairRecursive(head.next.next);
        return head;
    }
}

//迭代实现
public Node reversePairIterative(Node head){
    Node tmp1=null;
    Node tmp2=null;
    while(head!=null&&head.next!=null){
        if(tmp1!=null){
            tmp1.next.next=head.next;
        }
        tmp1=head.next;
        head.next=head.next.next;
        tmp1.next=head;
        if(tmp2==null){
            tmp2=tmp1;
        }
        head=head.next;
    }
    return tmp2;
} 

//求链表环的长度
public class Node{
    public int value;
    public Node next;
    public Node(int data){
        this.value=data;
    }
}
public int findLoopLength(Node head){
    Node fast=head;
    Node slow=head;
    boolean loopExist=false;
    int len;
    if(head==null){
        return 0;
    }
    while(fast.next!=null&&fast.next.next!=null){
        slow=slow.next;
        fast=fast.next.next;
        if(slow==fast){
            loopExist=true;
            break;
        }
    }
    if(loopExist){
        fast=fast.next;
        while(slow!=fast){
            fast=fast.next;
            len++
        }
        return len;
    }
    //链表没有环
    return 0;
}


//检查链表长度是奇数还是偶数
public class Node{
    public int value;
    public Node next;
    public Node(int data){
        this.value=data;
    }
}
public void isLinkedListLengthEven(Node head){
    while(head!=null&&head.next!=null){
        head=head.next.next;
    }
    if(head==null){
        System.out.println("偶数");
        return;
    }
    System.out.println("奇数");
    return;
}